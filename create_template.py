from dataclasses import dataclass
from typing import List
from isatools.model import *
from isatools import isatab
from isatools.isatab.dump.write import *
import argparse


@dataclass
class FileParameter:
    parameter: ProtocolParameter
    value: ParameterValue


@dataclass
class File_details:
    """
    This class will hold the information of a file.
    """
    raw_file_name: str = ""
    raw_file_location: str = ""
    proccesed_file_name: str = ""
    proccesed_file_location: str = ""
    file_parameters: List[FileParameter] = None  # filter information
    number_of_columns: str = 0
    labels: List[str] = None  # Column labels
    # Column 1 label [incl. unit] = "Sample nr. [-]""
    # Column 2 label [incl. unit] = "Filtered Vibration level [g]"


@dataclass
class Sensor:
    """
    This class will hold the information of a sensor.
    """
    identifier: str = "s0"
    measurement_type: str = ""
    measurement_unit: str = ""
    description: str = ""
    # Sensor details
    technology_type: str = ""
    technology_platform: str = ""
    data_acquisition_unit: str = ""
    sampling_rate: str = ""
    sampeling_unit: str = ""
    sensor_location: str = ""
    location_unit: str = ""
    sensor_orientation: str = ""
    orientation_unit: str = ""


@dataclass
class TestSetUp:
    name: str = ""
    location: str = ""
    characteristics: List[Characteristic] = None
    # Sensors and Measurements
    number_of_sensors: int = 0
    sensors: List[Sensor] = None


@dataclass
class AssayInfo:
    """
    This class will hold the information of an assay.
    """
    used_sensor: Sensor
    file_details: File_details


@dataclass
class StudyInfo:
    title: str = ""
    description: str = ""
    submission_date: str = ""
    public_release_date: str = ""
    detail_preparation: str = ""
    publication: Publication = None
    # STUDY CONTACTS
    contacts: List[Person] = None
    experiment_type: str = ""  # Diagnostic, Degradation-constant, Degradation-time-varyingstant
    # Setup
    used_setup: TestSetUp = None
    # Fault / Degradation
    fault_type: str = ""  # Fault, Degradation
    fault_position: str = ""  # Position of the fault
    fault_severity: str = ""  # Severity of the fault, can be an integer or a string
    operating_conditions: List[FactorValue] = None
    assay_details: List[AssayInfo] = None


@dataclass
class IsaPhmInfo:
    """
    This class will hold the information generated by a frontend.
    Any dates should be in ISO 8601 format.

    Attributes:
        identifier: The identifier of the investigation.
        title: The title of the investigation.
        description: The description of the investigation.
        submission_date: The submission date of the investigation.
        public_release_date: The public release date of the investigation.
        publication: The publication of the investigation.
        contacts: The contacts of the investigation.
        study_details: The details of the studies in the investigation.
    """
    identifier: str = "i0"
    title: str = ""
    description: str = ""
    submission_date: str = ""
    public_release_date: str = ""
    # INVESTIGATION PUBLICATIONS
    publication: Publication = None
    # INVESTIGATION CONTACTS
    contacts: List[Person] = None
    # INVESTIGATION STUDIES
    study_details: List[StudyInfo] = None


def create_info(filename) -> IsaPhmInfo:
    pass


def create_study_descriptor(experiment_type):
    annotation = OntologyAnnotation(term=experiment_type)
    return annotation


def add_test_setup(study: Study, setup: TestSetUp, operating_conditions: List[FactorValue]):
    source = Source(name=setup.name)
    study.sources.append(source)
    sample = Sample(name="Initialized experiment", derives_from=[source])
    sample.characteristics = setup.characteristics
    sample.factor_values.extend(operating_conditions)
    study.samples = batch_create_materials(sample, n=1)
    return sample


def create_assay_data(assay_info: AssayInfo, sample: Sample, study: Study):
    assay = Assay()
    # Sensor Details
    sensor = assay_info.used_sensor
    assay.measurement_type = sensor.measurement_type
    assay.technology_type = sensor.technology_type
    assay.technology_platform = sensor.technology_platform

    SR = ProtocolParameter(parameter_name="sampling rate")
    SL = ProtocolParameter(parameter_name="Sensor location")
    SO = ProtocolParameter(parameter_name="Sensor orientation")
    MU = ProtocolParameter(parameter_name="Measured unit")
    DataAcquisition = ProtocolParameter(parameter_name="Data Acquisition Unit")
    SR_value = ParameterValue(category=SR, value=sensor.sampling_rate,
                              unit=OntologyAnnotation(sensor.sampeling_unit))
    SL_value = ParameterValue(
        category=SL, value=sensor.sensor_location)
    SO_value = ParameterValue(category=SO, value=sensor.sensor_orientation)
    MU_value = ParameterValue(category=MU, value=sensor.measurement_unit)
    DataAcquisition_value = ParameterValue(
        category=DataAcquisition, value=sensor.data_acquisition_unit)

    file_details = assay_info.file_details
    data_collection_protocol = Protocol(
        name="data collection",
        protocol_type="data collection",
        parameters=[SR, SL, SO, MU, DataAcquisition])

    study.protocols.append(data_collection_protocol)

    data_collection_process = Process(
        executes_protocol=data_collection_protocol,
        parameter_values=[SR_value, SL_value, SO_value, MU_value,
                          DataAcquisition_value]
    )

    datafile_raw = DataFile(
        filename=file_details.raw_file_name,
        label="Raw Data File",
        generated_from=[sample],
    )

    data_collection_process.inputs.append(sample)
    data_collection_process.outputs.append(datafile_raw)
    assay.process_sequence.append(data_collection_process)

    if file_details.file_parameters is not None:
        data_transformation_protocol = Protocol(
            name="data transformation",
            protocol_type="data transformation",
            parameters=[file_parameter.parameter for
                        file_parameter in file_details.file_parameters])
        study.protocols.append(data_transformation_protocol)

        data_transformation_process = Process(
            executes_protocol=data_transformation_protocol,
            parameter_values=[file_parameter.parameter for
                              file_parameter in file_details.file_parameters])
        data_transformation_process.inputs.append(
            data_collection_process.outputs[0])
        datafile = DataFile(
            filename=file_details.proccesed_file_name,
            label="Derived Array Data File",
            generated_from=[sample])
        data_transformation_process.outputs.append(datafile)
        plink(data_collection_process, data_transformation_process)
        assay.process_sequence.append(data_transformation_process)

    assay.samples.append(sample)

    return assay


def create_fault_preparation_protocol(study: Study, study_info: StudyInfo):
    experiment_preparation_protocol = Protocol(
        name=study_info.detail_preparation,
        protocol_type=OntologyAnnotation(term="Fault/degradation protocol"))
    study.protocols.append(experiment_preparation_protocol)
    experiment_preparation_process = Process(
        executes_protocol=experiment_preparation_protocol)

    for src in study.sources:
        experiment_preparation_process.inputs.append(src)
    for sam in study.samples:
        experiment_preparation_process.outputs.append(sam)

    study.process_sequence.append(experiment_preparation_process)


def create_study_data(study_info: StudyInfo, index: int):
    study = Study(filename=f"s_study_s{index}.txt")
    study.title = study_info.title
    study.identifier = f"s{index}"
    study.description = study_info.description
    study.submission_date = study_info.submission_date
    study.public_release_date = study_info.public_release_date
    # STUDY PUBLICATIONS
    study.publications.append(study_info.publication)
    # STUDY CONTACTS
    study.contacts = study_info.contacts
    # Experiment type
    study.design_descriptors = create_study_descriptor(study_info.experiment_type)
    # Study design
    sample = add_test_setup(study, study_info.used_setup,
                            study_info.operating_conditions)
    # Fault / Degradation
    FT = StudyFactor(name="Fault Type", factor_type="Qualitative Fault Specification")
    FP = StudyFactor(name="Fault Position", factor_type="Qualitative Fault Specification")
    FS = StudyFactor(name="Fault Severity", factor_type="Quantitative Fault Specification")
    FT1 = FactorValue(factor_name=FT, value=study_info.fault_type)
    FP1 = FactorValue(factor_name=FP, value=study_info.fault_position)
    FS1 = FactorValue(factor_name=FS, value=study_info.fault_severity)
    sample.factor_values.append(FT1)
    sample.factor_values.append(FP1)
    sample.factor_values.append(FS1)
    # Protocol refrerence
    create_fault_preparation_protocol(study, study_info)

    for assay in study_info.assay_details:
        assay_data = create_assay_data(assay, sample, study)
        study.assays.append(assay_data)

    return study


def create_isa_data(IsaPhmInfo: IsaPhmInfo):
    investigation = Investigation()
    investigation.filename = "i_investigation.txt"
    investigation.identifier = IsaPhmInfo.identifier
    investigation.title = IsaPhmInfo.title
    investigation.description = IsaPhmInfo.description
    investigation.submission_date = IsaPhmInfo.submission_date
    investigation.public_release_date = IsaPhmInfo.public_release_date
    # INVESTIGATION PUBLICATIONS
    investigation.publications.append(IsaPhmInfo.publication)
    # INVESTIGATION CONTACTS
    investigation.contacts = IsaPhmInfo.contacts
    for i, study in enumerate(IsaPhmInfo.study_details):
        s = create_study_data(study, i)
        investigation.studies.append(s)
    return investigation


def main(args):
    info = create_info(args.file)
    inv_obj = create_isa_data(info)
    write_study_table_files(inv_obj, "")  # ,write_factor_values=False)
    write_assay_table_files(
        inv_obj, "", write_factor_values=False
    )  # ,write_factor_values=False)
    isatab.dump(inv_obj)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--tab", action="store_true", default=True,
                        help="when this is flag is enabled outputs isa-tab format, default is True")
    parser.add_argument("-j", "--json", action="store_true", default=False,
                        help="when this is flag is enabled outputs isa-json format, default is False")
    parser.add_argument("file",
                        help="input a json file that contains the necessary information to create the isa-phm")
    args = parser.parse_args()
    main(args)
